dnl 
dnl $Id: configure.in,v 1.15.4.77 2007/08/25 21:41:20 wojci Exp $
dnl 

AC_PREREQ(2.59)

AC_INIT(bcore/project.h)
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(btg, 0.9.8)

BTG_BUILD="$VER_CURRENT.$VER_REVISION"
AC_SUBST(BTG_BUILD)

AC_CONFIG_HEADERS(config.h)

AC_PROG_CC

if test -z "$(which $CC)"; then
    AC_MSG_ERROR([Unable to find a working C compiler, giving up.])
fi

AC_PROG_CPP
AC_PROG_CXX

if test -z "$(which $CXX)"; then
    AC_MSG_ERROR([Unable to find a working C++ compiler, giving up.])
fi

AC_CACHE_SAVE

AM_PROG_CC_STDC
AM_PROG_CC_C_O   # for daemon.c
AC_HEADER_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
dnl AM_PROG_LIBTOOL
PKG_PROG_PKG_CONFIG([0.9.0]) dnl generally can be used any version

dnl actually for tests
AC_CHECK_FUNCS([semop semtimedop])

dnl FBsd wants special paths
case "${target}" in
	*-*-freebsd7* | *-*-freebsd8*)
                AC_MSG_NOTICE([Enabling FreeBSD 7/8 specific settings])
                CPPFLAGS="$CPPFLAGS -I/usr/local/include"
                CFLAGS="$CFLAGS -I/usr/local/include"
                LDFLAGS="$LDFLAGS -L/usr/local/lib"
		#LIBS="$LIBS -lpthread" enable it if doesn't work without
                ;;
        *-*-freebsd*)
                AC_MSG_NOTICE([Enabling FreeBSD non-7 specific settings])
                CPPFLAGS="$CPPFLAGS -I/usr/local/include"
                CFLAGS="$CFLAGS -I/usr/local/include"
                LDFLAGS="$LDFLAGS -L/usr/local/lib"
		LIBS="$LIBS -lc_r -lpthread"
                ;;
        *)
                ;;
esac

BTG_EXECINFO_CHECK

dnl Used in the script in the script directory.
AC_PATH_PROGS(BASH, bash)

dnl Build.
BTG_BUILD=$VERSION

AC_SUBST(BTG_BUILD)
rm -f datestamp

BTG_REV="RC2"
AC_SUBST(BTG_REV)

AC_CACHE_SAVE

dnl Pthread support:

ACX_PTHREAD([enable_threads="pthread"],[enable_threads="no"])

if test $enable_threads != "pthread"; then
    AC_MSG_ERROR([unable to find pthreads, currently this is required.])
else
    AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.])
    LIBS="$PTHREAD_LIBS $LIBS"
    AC_MSG_NOTICE("pthread libs: $PTHREAD_LIBS")
    CFLAGS="$PTHREAD_CFLAGS $CFLAGS"
    AC_MSG_NOTICE("pthread cflags: $PTHREAD_CFLAGS")
    CPPFLAGS="$PTHREAD_CFLAGS $CPPFLAGS"
    AC_MSG_NOTICE("pthread cppflags: $PTHREAD_CFLAGS")
fi

AC_CXX_HAVE_SSTREAM
AC_CXX_HAVE_STD
AC_CXX_HAVE_VECTOR_AT

AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(streambuf   ostream   iostream   fstream   sstream ios_base)
AC_CHECK_HEADERS(streambuf.h ostream.h iostream.h fstream.h)
dnl bug 11759.
AC_CHECK_HEADERS(expat.h)

AC_CXX_HAVE_IOS_BASE
AC_CXX_HAVE_STRING_CLEAR
AC_CXX_EXCEPTIONS
AC_CXX_VERBOSE_TERMINATE_HANDLER

dnl AX_ICONV
AM_ICONV

AC_CACHE_SAVE

AM_PATH_LIBGNUTLS([1.0.0], [gnutlsfound=true], [gnutlsfound=false])

if test "$gnutlsfound" == "false"; then
        AC_MSG_ERROR([unable to find libgnutls library, currently this is required.])
fi

AM_LIBGNUTLS_VERSION

# Work-around for new BOOST detection macros
# we should point it to the dirs where to search libs
if test -z "$BOOST_LDFLAGS" ; then
	# default locations
	AC_MSG_NOTICE([Perhaps you need to set BOOST_LDFLAGS to specify where to search for your BOOST libs.])
	for BOOST_libdir in /usr/local/boost*/lib /usr/local/lib /usr/boost*/lib /usr/lib ; do
		AC_MSG_CHECKING([BOOST libs in $BOOST_libdir])
		for BOOST_lib in $BOOST_libdir/libboost* ; do
		if test -r "$BOOST_lib" ; then
				AC_MSG_RESULT([found])
				BOOST_LDFLAGS="-L$BOOST_libdir"
				break
			else
				AC_MSG_RESULT([no])
				break
			fi
		done
		test -n "$BOOST_LDFLAGS" && break
	done
	if test -z "$BOOST_LDFLAGS" ; then
		AC_MSG_ERROR([Unable to find where BOOST libraries is. You should set BOOST_LDFLAGS manually.])
	fi
fi
AC_MSG_NOTICE([Using BOOST_LDFLAGS = $BOOST_LDFLAGS])
LDFLAGS="$LDFLAGS $BOOST_LDFLAGS"
# the same for includes
if test -z "$BOOST_CPPFLAGS" ; then
	# default locations
	AC_MSG_NOTICE([Perhaps you need to set BOOST_CPPFLAGS to specify where to search for your BOOST includes.])
	for BOOST_incdir in /usr/local/boost*/include /usr/local/boost*/include/boost* /usr/local/include /usr/local/include/boost* /usr/boost*/include /usr/boost*/include/boost* /usr/include /usr/include/boost* ; do
		AC_MSG_CHECKING([BOOST includes in $BOOST_incdir])
		if test -r "$BOOST_incdir/boost/config.hpp" ; then
			AC_MSG_RESULT([found])
			BOOST_CPPFLAGS="-I$BOOST_incdir"
		else
			AC_MSG_RESULT([no])
		fi
		test -n "$BOOST_CPPFLAGS" && break
	done
	if test -z "$BOOST_CPPFLAGS" ; then
		AC_MSG_ERROR([Unable to find where BOOST includes is. You should set BOOST_CPPFLAGS manually.])
	fi
fi
AC_MSG_NOTICE([Using BOOST_CPPFLAGS = $BOOST_CPPFLAGS])
CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS"

AX_BOOST_SYSTEM
dnl check that Boost.System was found:
if test -z "$BOOST_SYSTEM_LIB"; then
   dnl AC_MSG_ERROR([unable to find Boost.System library, currently this is required.])
   AC_MSG_NOTICE([unable to find Boost.System library, this is not required unless boost 1.3.5 or better is used.])
   BOOST_SYSTEM_LIB=""
   AC_SUBST(BOOST_SYSTEM_LIB)
fi

AX_BOOST_IOSTREAMS
dnl check that Boost.IOStreams was found:
if test -z "$BOOST_IOSTREAMS_LIB"; then
   AC_MSG_ERROR([unable to find Boost.IOStreams library, currently this is required.])
fi

AX_BOOST_FILESYSTEM
dnl check that Boost.Filesystem was found:
if test -z "$BOOST_FILESYSTEM_LIB"; then
   AC_MSG_ERROR([unable to find Boost.Filesystem library, currently this is required.])
fi

AX_BOOST_DATE_TIME
dnl check that Boost.DateTime was found:
if test -z "$BOOST_DATE_TIME_LIB"; then
    AC_MSG_ERROR([unable to find Boost.DateTime library, currently this is required.])
fi

AX_BOOST_THREAD
dnl check that Boost.Thread was found:
if test -z "$BOOST_THREAD_LIB"; then
   AC_MSG_ERROR([unable to find Boost.Thread library, currently this is required.])
fi

AX_BOOST_PROGRAM_OPTIONS
dnl check that program_options was found:
if test -z "$BOOST_PROGRAM_OPTIONS_LIB"; then
   AC_MSG_ERROR([unable to find Boost::Program_Options library, currently this is required.])
fi

AC_CACHE_SAVE

dnl Check for Rasterbar Libtorrent.
BTG_RBLIBTORRENT_CHECK

AC_MSG_NOTICE([Using libtorrent CFLAGS: $LIBTORRENT_CFLAGS])
AC_MSG_NOTICE([Using libtorrent LIBS  : $LIBTORRENT_LIBS])


AC_ARG_ENABLE(btg-config, AC_HELP_STRING([--enable-btg-config], [generate btg-config script]),
[case "${enableval}" in
yes) gen_btg_config=true ;;
no)  gen_btg_config=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-btg-config) ;;
esac],[gen_btg_config=false])
AM_CONDITIONAL(GENBTGCONFIG, test x$gen_btg_config = xtrue)

dnl Check that dialog exists.

if test "$gen_btg_config" == "true"; then
   AC_PATH_PROG(DIALOG, dialog, "no")
   
   if test "${DIALOG}" = "no" ;
   then
     AC_MSG_ERROR([Dialog binary not found, currently this is required for the btg-config script.]);
   fi
fi

AC_CACHE_SAVE

dnl Argument: build the gui.

AC_ARG_ENABLE(gui, AC_HELP_STRING([--enable-gui],[build gtkmm gui client]),
[case "${enableval}" in
yes) buildgui=true ;;
no)  buildgui=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-gui) ;;
esac],[buildgui=false])
AM_CONDITIONAL(BUILDGUI, test x$buildgui = xtrue)

dnl Argument: build the AGAR/SDL viewer.

AC_ARG_ENABLE(viewer, AC_HELP_STRING([--enable-viewer], [build AGAR viewer]),
[case "${enableval}" in
yes) buildviewer=true ;;
no)  buildviewer=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-viewer) ;;
esac],[buildviewer=false])
AM_CONDITIONAL(BUILDVIEWER, test x$buildviewer = xtrue)

dnl Argument: build the cli.

AC_ARG_ENABLE(cli, AC_HELP_STRING([--enable-cli], [build ncurses client]),
[case "${enableval}" in
yes) buildcli=true ;;
no)  buildcli=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-cli) ;;
esac],[buildcli=false])
AM_CONDITIONAL(BUILDCLI, test x$buildcli = xtrue)

dnl Argument: build the www ui.

AC_ARG_ENABLE(www, AC_HELP_STRING([--enable-www], [install www client]),
[case "${enableval}" in
yes) buildwww=true ;;
no)  buildwww=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-www) ;;
esac],[buildwww=false])
AM_CONDITIONAL(BUILDWWW, test x$buildwww = xtrue)

dnl Argument: debug information.

AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [enable debug output]),
[case "${enableval}" in
yes) enabledebug=true ;;
no)  enabledebug=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac],[enabledebug=false])

dnl Argument: build unittests.

AC_ARG_ENABLE(unittest, AC_HELP_STRING([--enable-unittest], [enable unittesting]),
[case "${enableval}" in
yes) 
	enableunittest=true
	test -z "$BTG_TEST_HTTPADDR" && BTG_TEST_HTTPADDR="http://127.0.0.1/"
	AC_DEFINE_UNQUOTED([TEST_HTTPADDR],["$BTG_TEST_HTTPADDR"],[HTTP server address for httpmgr unittests.])
	;;
no)  enableunittest=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-unittest) ;;
esac],[enableunittest=false])
AM_CONDITIONAL(BTG_UNITTEST, test x$enableunittest = xtrue)

dnl Argument: enable session-saving.

AC_ARG_ENABLE(session-saving, AC_HELP_STRING([--enable-session-saving], [enable session-saving in daemon]),
[case "${enableval}" in
yes) enablesessionsaving=true ;;
no)  enablesessionsaving=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-session-saving) ;;
esac],[enablesessionsaving=false])

dnl Argument: enable event-callback.

AC_ARG_ENABLE(event-callback, AC_HELP_STRING([--enable-event-callback], [enable calling a script or executable for certain events]),
[case "${enableval}" in
yes) enableeventcallback=true ;;
no)  enableeventcallback=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-event-callback) ;;
esac],[enableeventcallback=false])

AC_ARG_ENABLE(upnp, AC_HELP_STRING([--enable-upnp], [enable the use of UPNP (Cyberlink or native libtorrent implementation)]),
[case "${enableval}" in
yes) enableupnp=true ;;
no)  enableupnp=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-upnp) ;;
esac],[enableupnp=false])

AC_ARG_ENABLE(url, AC_HELP_STRING([--enable-url], [enable URL downloading using CURL]),
[case "${enableval}" in
yes) enableurl=true ;;
no)  enableurl=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-event-callback) ;;
esac],[enableurl=false])

AC_ARG_ENABLE(command-list, AC_HELP_STRING([--enable-command-list], [enable generating a command list. Internal option]),
[case "${enableval}" in
yes) enablecommandlist=true ;;
no)  enablecommandlist=false ;;
*) AC_MSG_ERROR(bad value ${enableval} for --enable-command-list) ;;
esac],[enablecommandlist=false])

dnl Use it after libtorrent detection
BTG_UPNP_CHECK

AC_MSG_CHECKING([whether debug information should be included])
if test "$enabledebug" == "true"; then
        BTG_DEBUG=1
        dnl My compiler flags:
        DEBUG_CFLAGS="-g -Wall -W -rdynamic"
        AC_SUBST(DEBUG_CFLAGS)
        DEBUG_CXXFLAGS="-g -Wall -W -rdynamic"
        AC_SUBST(DEBUG_CXXFLAGS)
        AC_MSG_RESULT([yes])
else
        AC_MSG_RESULT([no])
        BTG_DEBUG=0
        DEBUG_CFLAGS="-DNDEBUG"
        AC_SUBST(DEBUG_CFLAGS)
        DEBUG_CXXFLAGS="-DNDEBUG"
        AC_SUBST(DEBUG_CXXFLAGS)
fi

AC_SUBST(BTG_DEBUG)

AC_MSG_CHECKING([whether the GUI should be built])
if test "$buildgui" == "true"; then
        AC_MSG_RESULT([yes])
        PKG_CHECK_MODULES(GTKMM, gtkmm-2.4 >= 2.6.0)
else
        AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the AGAR viewer should be built])
if test "$buildviewer" == "true"; then
        AC_MSG_RESULT([yes])

        AM_PATH_AGAR(1.2.0)

        if test -z "$AGAR_LIBS"; then
          AC_MSG_ERROR([unable to find the AGAR library, currently this is required.])
        fi
else
        AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the CLI should be built])
if test "$buildcli" == "true"; then
        AC_MSG_RESULT([yes])

        dnl Check for ncurses.
        with_ncurses=yes
        MP_WITH_CURSES()

if test -z "$CURSES_LIB"; then
   AC_MSG_ERROR([unable to find ncurses, currently this is required.])
fi
   AC_SUBST(CURSES_LIB)

else
        AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the www UI should be installed])
if test "$buildwww" == "true"; then
        AC_MSG_RESULT([yes])
else
        AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the daemon session saving support should be enabled])
if test "$enablesessionsaving" == "true"; then
   BTG_OPTION_SAVESESSIONS=1
   AM_CONDITIONAL(BUILDSESSIONSAVING, true)
   AC_MSG_RESULT([yes])
else
   BTG_OPTION_SAVESESSIONS=0
   AM_CONDITIONAL(BUILDSESSIONSAVING, false)
   AC_MSG_RESULT([no])
fi

AC_SUBST(BTG_OPTION_SAVESESSIONS)

AC_MSG_CHECKING([whether the daemon should support calling callbacks on events])
if test "$enableeventcallback" == "true"; then
   BTG_OPTION_EVENTCALLBACK=1
   AM_CONDITIONAL(BUILDEVENTCALLBACK, true)
   AC_MSG_RESULT([yes])
else
   BTG_OPTION_EVENTCALLBACK=0
   AM_CONDITIONAL(BUILDEVENTCALLBACK, false)
   AC_MSG_RESULT([no])
fi

AC_SUBST(BTG_OPTION_EVENTCALLBACK)

AC_MSG_CHECKING([whether the daemon should support UPNP])
if test "$enableupnp" == "true"; then
   AC_MSG_RESULT([yes])

   AX_BOOST_THREAD
   dnl check that Boost.Thread was found:
   if test -z "$BOOST_THREAD_LIB"; then
      AC_MSG_ERROR([unable to find Boost.Thread library, currently this is required.])
   fi

   BTG_OPTION_UPNP=1
   AM_CONDITIONAL(BUILDUPNP, true)
else
   AC_MSG_RESULT([no])
   BTG_OPTION_UPNP=0
   AM_CONDITIONAL(BUILDUPNP, false)
fi

AC_SUBST(BTG_OPTION_UPNP)

AC_MSG_CHECKING([whether the unittests should be built])
if test "$enableunittest" == "true"; then
        AC_MSG_RESULT([yes])
        AM_PATH_CPPUNIT(1)

        if test -z "$CPPUNIT_LIBS"; then
          AC_MSG_ERROR([unable to find the Cppunit library, currently this is required.])
        fi
else
        AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the daemon should support URL downloading])
if test "$enableurl" == "true"; then
   AC_MSG_RESULT([yes])

   LIBCURL_CHECK_CONFIG([], [7.15.5], [libcurlfound=true], [libcurlfound=false])
   if test "$libcurlfound" == "false"; then
      AC_MSG_ERROR([unable to find libcurl, currently this is required.])
   fi

   BTG_OPTION_URL=1
   AM_CONDITIONAL(BUILDURL, true)
else
   AC_MSG_RESULT([no])
   BTG_OPTION_URL=0
   AM_CONDITIONAL(BUILDURL, false)
fi

AC_SUBST(BTG_OPTION_URL)

AC_MSG_CHECKING([whether the a command list should be generated])
if test "$enablecommandlist" == "true"; then
   AC_MSG_RESULT([yes])
   AM_CONDITIONAL(BUILDCOMMANDLIST, true)
else
   AC_MSG_RESULT([no])
   AM_CONDITIONAL(BUILDCOMMANDLIST, false)
fi

BTG_LINK_CHECK

AC_OUTPUT(Makefile external/Makefile external/xmlrpc-epi/Makefile external/xmlrpc-epi/src/Makefile external/xmlrpc-epi/expat/Makefile external/xmlrpc-epi/expat/xmlparse/Makefile external/xmlrpc-epi/expat/xmltok/Makefile external/ini/Makefile external/plotmm/Makefile bcore/Makefile bcore/client/Makefile daemon/Makefile daemon/http/Makefile daemon/upnp/Makefile daemon/ipfilter/Makefile daemon/auth/Makefile daemon/resource/Makefile utest/Makefile stest/Makefile doc/Makefile doc/commands/Makefile doc/site/Makefile UI/Makefile UI/cli/Makefile UI/cli/ncurses/Makefile UI/gui/Makefile UI/gui/viewer/Makefile UI/gui/viewer/sdl/Makefile UI/www/Makefile UI/www/php/Makefile UI/www/php/htdocs/bcore/command/Makefile UI/www/php/htdocs/bcore/Makefile UI/www/php/htdocs/images/Makefile UI/www/php/htdocs/Makefile UI/www/php/htdocs/version.php script/Makefile debian/Makefile script/btg-config)

AC_MSG_NOTICE([Status:])

if test "$gen_btg_config" == "true"; then
        AC_MSG_NOTICE([btg-config    : enabled])
else
        AC_MSG_NOTICE([btg-config    : disabled])
fi

if test "$enabledebug" == "true"; then
        AC_MSG_NOTICE([debug         : enabled])
else
        AC_MSG_NOTICE([debug         : disabled])
fi

if test "$buildcli" == "true"; then
        AC_MSG_NOTICE([CLI           : enabled])
else
        AC_MSG_NOTICE([CLI           : disabled])
fi

if test "$buildgui" == "true"; then
        AC_MSG_NOTICE([GUI           : enabled])
else
        AC_MSG_NOTICE([GUI           : disabled])
fi

if test "$buildviewer" == "true"; then
        AC_MSG_NOTICE([Viewer        : enabled])
else
        AC_MSG_NOTICE([Viewer        : disabled])
fi

if test "$buildwww" == "true"; then
        AC_MSG_NOTICE([WWW UI        : enabled])
else
        AC_MSG_NOTICE([WWW UI        : disabled])
fi

if test "$enablesessionsaving" == "true"; then
        AC_MSG_NOTICE([sessionsaving : enabled])
else
        AC_MSG_NOTICE([sessionsaving : disabled])
fi

if test "$enableeventcallback" == "true"; then
        AC_MSG_NOTICE([event callback: enabled])
else
        AC_MSG_NOTICE([event callback: disabled])
fi

if test "$enableupnp" == "true"; then
        AC_MSG_NOTICE([UPNP          : enabled])
else
        AC_MSG_NOTICE([UPNP          : disabled])
fi

if test "$enableurl" == "true"; then
        AC_MSG_NOTICE([URL           : enabled])
else
        AC_MSG_NOTICE([URL           : disabled])
fi

if test "$enableunittest" == "true"; then
        AC_MSG_NOTICE([unittest      : enabled])
else
        AC_MSG_NOTICE([unittest      : disabled])
fi

if test "$enablecommandlist" == "true"; then
        AC_MSG_NOTICE([command list  : enabled])
else
        AC_MSG_NOTICE([command list  : disabled])
fi
